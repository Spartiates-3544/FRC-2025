// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.NeutralModeValue;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Bras extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private TalonFX moteurbras;
    private DutyCycleEncoder encodeur;
    private PIDController pid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Bras() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        encodeur = new DutyCycleEncoder(0);

        moteurbras = new TalonFX(60);
        moteurbras.setNeutralMode(NeutralModeValue.Brake);
        addChild("Motor Controller 1",moteurbras);
        moteurbras.setInverted(false);
        pid = new PIDController(Constants.ArmConstants.kP, 0, 0);
        pid.setSetpoint(0.12);
        // pid.setTolerance(Constants.ArmConstants.PIDTolerance);
    }

    
    public void setVitesse(double vitesse){
        moteurbras.set(vitesse);
    }

    public void setPosition(double position) {
        pid.setSetpoint(position);
    }

    public Boolean brasLeve(){

        if(encodeur.get() <= 0.10){

            return true;
        }

        return false;

    }

    public Boolean brasBaisse(){

        if (encodeur.get() >= 0.22){

            return true;

        }

        return false;
        
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("rotations rev", encodeur.get());
        SmartDashboard.putNumber("rotations TalonFX", moteurbras.getPosition().getValueAsDouble());

        setVitesse(pid.calculate(encodeur.get()));
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

